#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct Dieta {
    char nomeComida[100];
    float pesoPorcao;
    int calorias;
    struct Dieta* proximo;
};

struct Dieta* solicitarDadosDieta() {
    struct Dieta* novaComida = (struct Dieta*)malloc(sizeof(struct Dieta));
    if (novaComida == NULL) {
        printf("Erro ao alocar memória.\n");
        return NULL;
    }

    printf("Digite a comida: ");
    scanf("%s", novaComida->nomeComida);

    printf("Digite o peso (em gramas): ");
    scanf("%f", &(novaComida->pesoPorcao));

    printf("Digite as calorias: ");
    scanf("%d", &(novaComida->calorias));

    novaComida->proximo = NULL;

    return novaComida;
}

void adicionarElemento(struct Dieta** inicio) {
    struct Dieta* novaComida = solicitarDadosDieta();
    if (novaComida == NULL) {
        return;
    }

    if (*inicio == NULL) {
        *inicio = novaComida;
    } else {
        struct Dieta* atual = *inicio;
        while (atual->proximo != NULL) {
            atual = atual->proximo;
        }
        atual->proximo = novaComida;
    }

    printf("Elemento adicionado com sucesso!\n\n");
}

void listarDadosDieta(struct Dieta* inicio) {
    if (inicio == NULL) {
        printf("A lista está vazia.\n");
        return;
    }

    printf("Dados da dieta:\n");

    struct Dieta* atual = inicio;
    while (atual != NULL) {
        printf("Comida: %s\n", atual->nomeComida);
        printf("Peso da porção: %.2fg\n", atual->pesoPorcao);
        printf("Calorias: %d\n\n", atual->calorias);

        atual = atual->proximo;
    }
}

void liberarMemoria(struct Dieta* inicio) {
    struct Dieta* atual = inicio;
    while (atual != NULL) {
        struct Dieta* proximo = atual->proximo;
        free(atual);
        atual = proximo;
    }
}

int main() {
    struct Dieta* inicio = NULL;
    char adicionarMais;

    do {
        adicionarElemento(&inicio);

        printf("Deseja adicionar mais algum? (s/n): ");
        scanf(" %c", &adicionarMais);
    } while (adicionarMais == 's' || adicionarMais == 'S');

    listarDadosDieta(inicio);

    liberarMemoria(inicio);

    return 0;
}
